@using Blazor.Extensions;
@using ras_pi_cs.Shared;
@page "/"

<h1>Hello, CSharp!</h1>

LED is @LedStatusMessage

<button onclick="@LED_ON">ON</button>
<button onclick="@LED_OFF">OFF</button>

@functions
{
    private HubConnection Connection;

    private string LedStatusMessage;

    protected override async Task OnInitAsync()
    {
        Console.WriteLine($"{DateTime.Now} :OnInitAsync");

        Connection = new HubConnectionBuilder()
        .WithUrl("/LedHub",
        opt =>
        {
            opt.LogLevel = SignalRLogLevel.Trace;
            opt.Transport = HttpTransportType.WebSockets;
        })
        .Build();

        Connection.On<LedStatus>("ChangeLedStatus", status =>
        {
            Console.WriteLine($"{DateTime.Now} : On ChangeLedStatus");
            LedStatusMessage = status.Value ? "ON" : "OFF";
            StateHasChanged();
            return Task.CompletedTask;
        });

        await Connection.StartAsync();

        var ledStatus = await Connection.InvokeAsync<LedStatus>("GetLedStatus");
        LedStatusMessage = ledStatus.Value ? "ON" : "OFF";
    }

    async Task LED_ON()
    {
        Console.WriteLine($"{DateTime.Now} :LED_ON");
        await Connection.InvokeAsync("SetLedStatus", new LedStatus() { Value = true });
    }

    async Task LED_OFF()
    {
        Console.WriteLine($"{DateTime.Now} :LED_OFF");
        await Connection.InvokeAsync("SetLedStatus", new LedStatus() { Value = false });
    }
}
